// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"G20220607100065/Go-009/week04/app/book/internal/biz"
	"G20220607100065/Go-009/week04/app/book/internal/conf"
	"G20220607100065/Go-009/week04/app/book/internal/data"
	"G20220607100065/Go-009/week04/app/book/internal/data/ent"
	"G20220607100065/Go-009/week04/app/book/internal/server"
	"G20220607100065/Go-009/week04/app/book/internal/service"
	"golang.org/x/sync/errgroup"
)

// Injectors from wire.go:

// initApp Inject wire ProvideSet
func initApp(group *errgroup.Group, option conf.Options) *App {
	client := data.NewEntClient(option)
	httpBookRepo := service.NewHTTPBookRepo(client)
	httpBookBusiness := biz.NewHttpBookBusiness(httpBookRepo)
	engine := server.NewHttpRouter(option, httpBookBusiness)
	httpServer := server.NewHttpServer(group, option, engine)
	grpcBookService := service.NewGRPCBookService(client)
	grpcServer := server.NewGRPCServer(group, option, grpcBookService)
	app := newApp(httpServer, grpcServer, client)
	return app
}

// wire.go:

type App struct {
	HttpServer *server.HttpServer
	GRPCServer *server.GRPCServer
	Client     *ent.Client
}

// newApp return App struct with server.HttpServer and server.GRPCServer
func newApp(http *server.HttpServer, grpc *server.GRPCServer, client *ent.Client) *App {
	return &App{HttpServer: http, GRPCServer: grpc, Client: client}
}
